Vâng . sau khi tôi làm chán SQL Injection ( còn tầm 7 lab chưa làm ) thì tôi ngứa tay làm XSS cho lấy cảm hứng 


Đảo qua về lý thuyết 

  Không biết nói như nào cả, Coppy nguyên lý thuyết có khi lại khó hiểu hơn. Vậy nên mình nói vắn tắt dễ hiểu ai hiểu thì hiểu không hiểu thì hiểu.
  XSS đơn giản là thực thi script không mong muốn tới browser người dùng để lấy dữ liệu nhảy cảm hoặc làm cái gì đó mà tôi cũng chưa thấu lắm vì đơn giản tôi chưa phải "black hat"
Hiểu 1 cách đơn giản là input của mình nối chuỗi với các giá trị html để sao cho thực thi html hoặc script là lỗi xss : <script>alert(1)</script>

XSS là lỗi ở phần nào ? 
  Ở phần front nhé , nó trực tiếp ở browser người dùng 

=======================================================================================================================================================================================================

'########:'########::'####::'######::'##:::'##:
... ##..:: ##.... ##:. ##::'##... ##: ##::'##::
::: ##:::: ##:::: ##:: ##:: ##:::..:: ##:'##:::
::: ##:::: ########::: ##:: ##::::::: #####::::
::: ##:::: ##.. ##:::: ##:: ##::::::: ##. ##:::
::: ##:::: ##::. ##::: ##:: ##::: ##: ##:. ##::
::: ##:::: ##:::. ##:'####:. ######:: ##::. ##:
:::..:::::..:::::..::....:::......:::..::::..::


Đéo có trick . mọi thứ trong đầu hết r


=======================================================================================================================================================================================================

                                          ___   ___                          
    / /        // | |     //   ) ) /__  ___/ / /    /|    //| |     //   / / 
   / /        //__| |    //___/ /    / /    / /    //|   // | |    //____    
  / /        / ___  |   / __  (     / /    / /    // |  //  | |   / ____     
 / /        //    | |  //    ) )   / /    / /    //  | //   | |  //          
/ /____/ / //     | | //____/ /   / /  __/ /___ //   |//    | | //____/ /  


Bài 1 : https://portswigger.net/web-security/cross-site-scripting/reflected/lab-html-context-nothing-encoded
    Bài này điền script thủy tổ vào chỗ search là xong nhé 
        <script>alert(1)</script>

Bài 2 : https://portswigger.net/web-security/cross-site-scripting/stored/lab-html-context-nothing-encoded
    Đề bài bảo là : To solve this lab, submit a comment that calls the alert function when the blog post is viewed.
      Có cái phần comment ý
        <script>alert(1)</script>
      1 lần nữa script thủy tổ lên tiếng 

Bài 3 : https://portswigger.net/web-security/cross-site-scripting/dom-based/lab-document-write-sink
    Đề bài bài này lắm chữ tiếng anh quá, mình sở trưởng ngu tiếng anh nên là
        Nó bảo là lab này chứa DOM-based XSS ở phần search. dùng document.write và location.search có thể làm chủ thiên hạ 
          Sử dụng script thủy tổ không có tác dụng, quá hung hãn , phải mở giải ra xem thôi 
            Dumaconcakgiz why wtf 
              "><svg onload=alert(1)>
                sao payload này hoạt động đc. À ban đầu méo hiểu đâu. nhưng hóa ra là nó tương tác với thẻ img ở phía dưới bảo sao 
              Ví dụ nhập aaaaa thì thẻ img sẽ là <img src="/resources/images/tracker.gif?searchTerms=aaaaa">
                Thừa thằng xông lên : "><script>alert(1)</script>
                  Done , script thủy tổ là vô cmn địch 

Bài 4 : https://portswigger.net/web-security/cross-site-scripting/dom-based/lab-innerhtml-sink
    Lỗi ở phần search 
      Bài này khá là tịt 
        <img src=1 onerror=alert(1)> 
    Đến đây thôi đã , về nhà làm tiếp 
    0h35p ngày 5/5 . Đã hiểu sơ qua nhưng cần tìm hiểu kĩ hơn -> hôm sau tìm writeup nhé 
        Với payload trên có thể thấy được src=1 không phải là 1 hình ảnh nên xảy ra lỗi kích hoạt onerror lên. 

                    function doSearchQuery(query) {
                                document.getElementById('searchMessage').innerHTML = query;
                            }
                            var query = (new URLSearchParams(window.location.search)).get('search');
                            if(query) {
                                doSearchQuery(query);
                            }
        Nhìn đoạn js này đi. Lỗi XSS ở đây vì giá trị query được lấy từ id searchMessage từ html 
          => Chốt vấn đề ở đây là dùng innerHTML sẽ không an toàn thay vào đó textContent sẽ an toàn 
            innerHTML Hành vi: Trình duyệt sẽ phân tích và thực thi đoạn mã <script>, dẫn đến việc hiển thị hộp thoại cảnh báo với nội dung 'XSS'. Đây là một lỗ hổng bảo mật nghiêm trọng.
            textContent Hành vi: Trình duyệt sẽ hiển thị toàn bộ chuỗi <script>alert('XSS');</script> dưới dạng văn bản thuần túy, mà không thực thi đoạn mã này. Điều này an toàn hơn và ngăn chặn các cuộc tấn công XSS.
        Tưởng xong rồi đúng không , nhưng như này là chưa đủ đâu 
            Thực tế bài lab này không thể sử dụng script thủy tổ <script>alert(1)</script> vì sao ? 
              
